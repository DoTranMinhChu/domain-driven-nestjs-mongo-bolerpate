<%_
  const toKebabCase = (str) =>
    str
      .replace(/([a-z0-9])([A-Z])/g, '$1-$2')
      .replace(/([A-Z])([A-Z][a-z])/g, '$1-$2')
      .toLowerCase();

  const Name = name.charAt(0).toUpperCase() + name.slice(1);
  const kebab = toKebabCase(name); 
  const camelCase = name.charAt(0).toLowerCase() + name.slice(1)
_%>
import { <%= Name %>Service } from '@domain/<%= kebab %>/services';
import { <%= Name %>Schema } from '@infrastructure/mongoose/schemas';
import { Injectable } from '@nestjs/common';
import { FilterQuery } from 'mongoose';

@Injectable()
export class GetOne<%= Name %>ByConditionUseCase {
  constructor(private readonly <%= camelCase %>Service: <%= Name %>Service) {}

  async execute(condition: FilterQuery<<%= Name %>Schema>) {
    return this.<%= camelCase %>Service.findOne(condition);
  }
}

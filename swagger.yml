openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - App
  /api/v1/user:
    get:
      operationId: UserV1Controller_getAllUser
      parameters:
        - name: limit
          required: false
          in: query
          schema:
            example: 10
            type: number
        - name: page
          required: false
          in: query
          schema:
            example: 1
            type: number
        - name: order
          required: false
          in: query
          schema:
            example:
              createdAt: DESC
            type: string
        - name: filter
          required: false
          in: query
          schema:
            example: '{"isActivated":true}'
            type: string
        - name: search
          required: false
          in: query
          schema:
            example: keyword
            type: string
      responses:
        '200':
          description: Paginated result
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserObjectSchema'
                      total:
                        type: number
                        example: 100
                      pagination:
                        type: object
                        properties:
                          page:
                            type: number
                            example: 1
                          limit:
                            type: number
                            example: 10
                          offset:
                            type: number
                            example: 0
                          total:
                            type: number
                            example: 100
      summary: Get All User
      tags: &ref_0
        - User
    post:
      operationId: UserV1Controller_createUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserInputSchema'
      responses:
        '200':
          description: Single item response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObjectSchema'
      summary: Create One User
      tags: *ref_0
  /api/v1/user/{_id}:
    get:
      operationId: UserV1Controller_getOneUserById
      parameters:
        - name: _id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Single item response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObjectSchema'
      summary: Get One User
      tags: *ref_0
    patch:
      operationId: UserV1Controller_updateOneUserById
      parameters:
        - name: _id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserInputSchema'
      responses:
        '200':
          description: Single item response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObjectSchema'
      summary: Update One User
      tags: *ref_0
    delete:
      operationId: UserV1Controller_deleteOneUserById
      parameters:
        - name: _id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Single item response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObjectSchema'
      summary: Delete One User
      tags: *ref_0
info:
  title: Documention API
  description: >-
    <h3>üìã Query Parameters Usage</h3> <ul> <li>
    <strong><code>search</code></strong><br/> T√¨m ki·∫øm t·ªïng qu√°t tr√™n c√°c tr∆∞·ªùng
    vƒÉn b·∫£n (v√≠ d·ª•: email, t√™n).<br/> V√≠ d·ª•: <code>?search=john</code> s·∫Ω tr·∫£ v·ªÅ
    t·∫•t c·∫£ b·∫£n ghi ch·ª©a "john". </li> <li>
    <strong><code>filter</code></strong><br/> L·ªçc chi ti·∫øt b·∫±ng JSON v·ªõi c√°c
    to√°n t·ª≠:<br/> <code>$eq</code>, <code>$ne</code>, <code>$gt</code>,
    <code>$gte</code>, <code>$lt</code>, <code>$lte</code>, <code>$in</code>,
    <code>$nin</code>, <code>$or</code>, <code>$and</code>.<br/> V√≠ d·ª•:
    <code>?filter={"age":{"$gte":18},"status":{"$eq":"active"}}</code> </li>
    <li> <strong><code>limit</code></strong><br/> S·ªë b·∫£n ghi tr√™n m·ªói trang. M·∫∑c
    ƒë·ªãnh 10.<br/> V√≠ d·ª•: <code>?limit=20</code> </li> <li>
    <strong><code>page</code></strong><br/> S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 1).<br/> V√≠ d·ª•:
    <code>?page=2&amp;limit=20</code> s·∫Ω tr·∫£ b·∫£n ghi t·ª´ 21‚Äì40. </li> <li>
    <strong><code>sort</code></strong><br/> S·∫Øp x·∫øp theo tr∆∞·ªùng, ti·ªÅn t·ªë
    <code>-</code> cho gi·∫£m d·∫ßn.<br/> V√≠ d·ª•: <code>?sort={"createdAt":-1}</code>
    ho·∫∑c <code>?sort={"createdAt":1}</code> </li> </ul>
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      name: Access token
      type: http
  schemas:
    ObjectId:
      type: object
      properties: {}
    UserObjectSchema:
      type: object
      properties:
        _id:
          description: ID (Mongo ObjectID)
          example: 507f191e810c19729de860ea
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        createdAt:
          format: date-time
          type: string
          description: Th·ªùi gian t·∫°o
          example: '2025-05-30T12:34:56.789Z'
        updatedAt:
          format: date-time
          type: string
          description: Th·ªùi gian c·∫≠p nh·∫≠t m·ªõi nh·∫•t
          example: '2025-05-31T08:22:33.123Z'
        deletedAt:
          format: date-time
          type: string
          description: Th·ªùi gian xo√° (n·∫øu ƒë√£ soft-delete)
          example: null
          nullable: true
        name:
          type: string
          description: T√™n b√†i vi·∫øt
          example: H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng NestJS
      required:
        - _id
        - createdAt
        - updatedAt
        - name
    CreateUserInputSchema:
      type: object
      properties:
        _id:
          description: ID (Mongo ObjectID)
          example: 507f191e810c19729de860ea
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        createdAt:
          format: date-time
          type: string
          description: Th·ªùi gian t·∫°o
          example: '2025-05-30T12:34:56.789Z'
        updatedAt:
          format: date-time
          type: string
          description: Th·ªùi gian c·∫≠p nh·∫≠t m·ªõi nh·∫•t
          example: '2025-05-31T08:22:33.123Z'
        deletedAt:
          format: date-time
          type: string
          description: Th·ªùi gian xo√° (n·∫øu ƒë√£ soft-delete)
          example: null
          nullable: true
        name:
          type: string
          description: T√™n b√†i vi·∫øt
          example: H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng NestJS
      required:
        - _id
        - createdAt
        - updatedAt
        - name
    UpdateUserInputSchema:
      type: object
      properties:
        _id:
          description: ID (Mongo ObjectID)
          example: 507f191e810c19729de860ea
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        createdAt:
          format: date-time
          type: string
          description: Th·ªùi gian t·∫°o
          example: '2025-05-30T12:34:56.789Z'
        updatedAt:
          format: date-time
          type: string
          description: Th·ªùi gian c·∫≠p nh·∫≠t m·ªõi nh·∫•t
          example: '2025-05-31T08:22:33.123Z'
        deletedAt:
          format: date-time
          type: string
          description: Th·ªùi gian xo√° (n·∫øu ƒë√£ soft-delete)
          example: null
          nullable: true
        name:
          type: string
          description: T√™n b√†i vi·∫øt
          example: H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng NestJS
      required:
        - _id
        - createdAt
        - updatedAt
        - name
